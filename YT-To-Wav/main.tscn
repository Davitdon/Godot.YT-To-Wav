[gd_scene load_steps=6 format=3 uid="uid://cuif3cyewn0fb"]

[ext_resource type="Script" path="res://main.gd" id="1_hcke6"]
[ext_resource type="Script" path="res://cs_scripts/YoutubeToWav.cs" id="2_26b6g"]
[ext_resource type="Script" path="res://cs_scripts/Dependencies.cs" id="2_eswrh"]
[ext_resource type="Script" path="res://cs_scripts/TrimWavFile.cs" id="3_d5ao0"]

[sub_resource type="CSharpScript" id="CSharpScript_n2fjm"]
script/source = "using Godot;
using System;

//using System;
//using System.IO;
//using Windows.Foundation;
//using Windows.Media.MediaProperties;
//using Windows.Media.Transcoding;
//using Windows.Storage.Streams;

public partial class Mp4ToMp3 : Node
{
	//From GDscript
	//var mp3 :AudioStreamMP3= mp_4_to_mp_3.ConvertMP4ToMp3(mp4)

	// Converts Mp4 to mp3 using Media toolkit
	/*
	public Godot.AudioStreamMP3 WorksConvertMP4ToMp3(byte[] mp4Data)
	{
		Godot.AudioStreamMP3 mp3 =  new AudioStreamMP3();
		return mp3;
		
		var sound = \"sounds/test.mp3\";
		var audioFile = new AudioFileReader(sound);
		var outputDevice = new WaveOutEvent();
		outputDevice.Init(audioFile);
		outputDevice.Play();
		while (outputDevice.PlaybackState == PlaybackState.Playing)
		{
			Thread.Sleep(1000);
		}
		threadStop();
	}
	*/

	/*public static async void ConvertMp4ToMp3(byte[] mp4Data, Action<Stream> doneCallback) {
		MediaEncodingProfile profile = MediaEncodingProfile.CreateMp3(AudioEncodingQuality.High);
		var inputStream = new MemoryRandomAccessStream(mp4Data);
		var outputStream = new InMemoryRandomAccessStream();
		MediaTranscoder transcoder = new MediaTranscoder();

		PrepareTranscodeResult prepareOperation = await transcoder.PrepareStreamTranscodeAsync(inputStream, outputStream, profile);
		if (prepareOperation.CanTranscode) {
			//start to convert
			var transcodeOperation = prepareOperation.TranscodeAsync();

			//registers completed event handler 
			transcodeOperation.Completed += (IAsyncActionWithProgress<double> asyncInfo, AsyncStatus status) => {
				asyncInfo.GetResults();
				var stream = outputStream.AsStream();
				stream.Position = 0;
				doneCallback(stream);
			};
		} else {
			doneCallback(null);
		}
	}
	*/

}
"

[node name="Main" type="Node"]
script = ExtResource("1_hcke6")

[node name="cs" type="Node" parent="."]

[node name="Dependencies" type="Node" parent="cs"]
script = ExtResource("2_eswrh")

[node name="GetYoutubePlaylist" type="Node" parent="cs"]

[node name="ScrapeYoutube" type="Node" parent="cs"]

[node name="YoutubeToWav" type="Node" parent="cs"]
script = ExtResource("2_26b6g")

[node name="TrimWavFile" type="Node" parent="cs"]
script = ExtResource("3_d5ao0")

[node name="FileDialog" type="FileDialog" parent="."]
size = Vector2i(303, 180)
mode_overrides_title = false

[node name="Failures" type="Node" parent="."]

[node name="Mp4ToMP3" type="Node" parent="Failures"]
script = SubResource("CSharpScript_n2fjm")

[connection signal="confirmed" from="FileDialog" to="." method="_on_file_dialog_confirmed"]
